import { useState, useEffect } from "react";
import apiService from "../../../services/apiService";
import { toast } from "react-toastify";
import { User } from "../../../models";

type EditUserModalProps = {
  isOpen: boolean;
  onClose: () => void;
  user: User | null;
  onUpdateSuccess: (updatedUser: User) => void; // Th√™m prop m·ªõi
};

export default function EditUserModal({
  isOpen,
  onClose,
  user,
  onUpdateSuccess, // Nh·∫≠n callback t·ª´ component cha
}: EditUserModalProps) {
  const [formData, setFormData] = useState({
    taiKhoan: "",
    matKhau: "",
    hoTen: "",
    email: "",
    soDt: "",
    maLoaiNguoiDung: "",
    maNhom: "GP01",
  });

  const [errors, setErrors] = useState({
    matKhau: "",
    hoTen: "",
    email: "",
    soDt: "",
  });

  useEffect(() => {
    if (user) {
      setFormData({
        taiKhoan: user.taiKhoan || "",
        matKhau: user.matKhau || "",
        hoTen: user.hoTen || "",
        email: user.email || "",
        soDt: user.soDt || "",
        maLoaiNguoiDung: user.maLoaiNguoiDung || "",
        maNhom: user.maNhom || "GP01",
      });
    }
  }, [user]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const validate = () => {
    const newErrors: any = {};

    if (!formData.matKhau.trim()) {
      newErrors.matKhau = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!";
    }

    if (!formData.hoTen.trim()) {
      newErrors.hoTen = "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!";
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!formData.email.trim() || !emailPattern.test(formData.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá!";
    }

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i (n·∫øu c√≥ th·ªÉ l√† s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam)
    const phonePattern = /^0[0-9]{9}$/;
    if (!formData.soDt.trim() || !phonePattern.test(formData.soDt)) {
      newErrors.soDt = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0; // Tr·∫£ v·ªÅ true n·∫øu kh√¥ng c√≥ l·ªói
  };

  const handleUpdateUser = async () => {
    if (!validate()) {
      return;
    }

    try {
      const result = await apiService.put(
        `QuanLyNguoiDung/CapNhatThongTinNguoiDung`,
        formData
      );

      if (result.status === 200) {
        toast.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng! üéâ");
        onUpdateSuccess(formData); // C·∫≠p nh·∫≠t d·ªØ li·ªáu l√™n component cha
        onClose(); // ƒê√≥ng modal
      } else {
        toast.warn("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t, vui l√≤ng th·ª≠ l·∫°i!");
      }
    } catch (error: any) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t user:", error.response?.data);
      toast.error(
        error.response?.data || "L·ªói khi c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i!"
      );
    }
  };

  return isOpen ? (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
      <div className="bg-white p-6 rounded-lg w-96">
        <h2 className="text-xl font-semibold mb-4">Ch·ªânh s·ª≠a th√¥ng tin</h2>
        <div className="mb-2">
          <label className="block text-sm font-medium text-gray-700">
            T√†i kho·∫£n
          </label>
          <input
            type="text"
            name="taiKhoan"
            value={formData.taiKhoan}
            onChange={handleChange}
            className="w-full border p-2 bg-gray-200 opacity-70 cursor-not-allowed"
            disabled
          />
        </div>
        <div className="mb-2">
          <label className="block text-sm font-medium text-gray-700">
            M·∫≠t kh·∫©u
          </label>
          <input
            type="text"
            name="matKhau"
            value={formData.matKhau}
            onChange={handleChange}
            className="w-full border p-2"
            placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
          />
          {errors.matKhau && <p className="text-red-500 text-xs">{errors.matKhau}</p>}
        </div>

        <div className="mb-2">
          <label className="block text-sm font-medium text-gray-700">
            H·ªç t√™n
          </label>
          <input
            type="text"
            name="hoTen"
            value={formData.hoTen}
            onChange={handleChange}
            className="w-full border p-2"
            placeholder="H·ªç t√™n"
          />
          {errors.hoTen && <p className="text-red-500 text-xs">{errors.hoTen}</p>}
        </div>

        <div className="mb-2">
          <label className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className="w-full border p-2"
            placeholder="Email"
          />
          {errors.email && <p className="text-red-500 text-xs">{errors.email}</p>}
        </div>

        <div className="mb-2">
          <label className="block text-sm font-medium text-gray-700">
            S·ªë ƒëi·ªán tho·∫°i
          </label>
          <input
            type="text"
            name="soDt"
            value={formData.soDt}
            onChange={handleChange}
            className="w-full border p-2"
            placeholder="S·ªë ƒëi·ªán tho·∫°i"
          />
          {errors.soDt && <p className="text-red-500 text-xs">{errors.soDt}</p>}
        </div>

        <div className="mb-2">
          <label className="block text-sm font-medium text-gray-700">
            Lo·∫°i ng∆∞·ªùi d√πng
          </label>
          <select
            name="maLoaiNguoiDung"
            value={formData.maLoaiNguoiDung}
            onChange={handleChange}
            className="w-full border p-2"
          >
            <option value="GV">Gi√°o v·ª•</option>
            <option value="HV">H·ªçc vi√™n</option>
          </select>
        </div>

        <button
          onClick={handleUpdateUser}
          className="bg-blue-500 text-white px-4 py-2 rounded mr-2"
        >
          L∆∞u
        </button>
        <button
          onClick={onClose}
          className="bg-gray-500 text-white px-4 py-2 rounded"
        >
          H·ªßy
        </button>
      </div>
    </div>
  ) : null;
}
