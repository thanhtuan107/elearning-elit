import { useSearchParams, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { toast, ToastContainer } from "react-toastify";
import apiService from "../../../services/apiService";
import { User } from "../../../models";
import EditUserModal from "./modalUser";

export default function SearchUser() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const tuKhoa = searchParams.get("tuKhoa") || ""; // L·∫•y t·ª´ kh√≥a t·ª´ URL

  const [users, setUsers] = useState<User[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);

  // Debug: Ki·ªÉm tra t·ª´ kh√≥a l·∫•y ƒë∆∞·ª£c
  useEffect(() => {
    console.log("T·ª´ kh√≥a hi·ªán t·∫°i:", tuKhoa);
  }, [tuKhoa]);

  // G·ªçi API t√¨m ki·∫øm ng∆∞·ªùi d√πng
  useEffect(() => {
    const searchUser = async (tuKhoa: string) => {
      try {
        const response = await apiService.get(
          `QuanLyNguoiDung/TimKiemNguoiDung?MaNhom=GP01&tuKhoa=${encodeURIComponent(tuKhoa)}`
        );
        console.log("D·ªØ li·ªáu API tr·∫£ v·ªÅ:", response.data);
        setUsers(Array.isArray(response.data) ? response.data : []);
      } catch (error) {
        console.error("L·ªói khi t√¨m ki·∫øm ng∆∞·ªùi d√πng:", error);
      }
    };

    if (tuKhoa.trim() !== "") {
      searchUser(tuKhoa);
    }
  }, [tuKhoa]);

  // X·ª≠ l√Ω khi nh·∫•n "S·ª≠a"
  const handleEditUser = (user: User) => {
    setSelectedUser(user);
    setIsModalOpen(true);
  };

  // X·ª≠ l√Ω khi nh·∫•n "X√≥a"
  const handleDeleteUser = async (taiKhoan: string) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?")) {
      return;
    }

    try {
      const response = await apiService.delete(
        `QuanLyNguoiDung/XoaNguoiDung/${taiKhoan}`
      );
      if (response.status === 200) {
        toast.success("X√≥a user th√†nh c√¥ng! üéâ");
        setUsers(users.filter((user) => user.taiKhoan !== taiKhoan)); // C·∫≠p nh·∫≠t UI
      } else {
        toast.warn("Kh√¥ng th·ªÉ x√≥a user, vui l√≤ng th·ª≠ l·∫°i!");
      }
    } catch (error: any) {
      console.error("‚ùå L·ªói khi x√≥a user:", error);
      toast.error(error.response?.data || "L·ªói t·ª´ server. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  // C·∫≠p nh·∫≠t danh s√°ch sau khi s·ª≠a th√†nh c√¥ng
  const handleUpdateSuccess = () => {
    if (tuKhoa) {
      setTimeout(() => {
        navigate(`?tuKhoa=${encodeURIComponent(tuKhoa)}`, { replace: true });
      }, 1000);
    }
  };

  return (
    <div className="relative overflow-x-auto shadow-md rounded-lg p-4">
      <ToastContainer position="top-right" autoClose={3000} />
      <h2 className="text-lg font-semibold pb-4">
        K·∫øt qu·∫£ t√¨m ki·∫øm: "{tuKhoa}"
      </h2>

      <table className="w-full text-sm text-gray-700 border border-gray-300">
        <thead className="text-xs uppercase bg-gray-200">
          <tr>
            {["T√†i kho·∫£n", "H·ªç t√™n", "Email", "S·ªë ƒêT", "M√£ lo·∫°i ng∆∞·ªùi d√πng", "Action"].map((header) => (
              <th key={header} className="px-2 py-2 text-center border border-gray-300">
                {header}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {users.length > 0 ? (
            users.map((user) => (
              <tr key={user.taiKhoan} className="odd:bg-gray-100 even:bg-white border-b">
                <td className="px-2 py-2 text-center border border-gray-300">{user.taiKhoan}</td>
                <td className="px-2 py-2 text-center border border-gray-300">{user.hoTen}</td>
                <td className="px-2 py-2 text-center border border-gray-300">{user.email}</td>
                <td className="px-2 py-2 text-center border border-gray-300">{user.soDt}</td>
                <td className="px-2 py-2 text-center border border-gray-300">{user.maLoaiNguoiDung}</td>
                <td className="px-2 py-2 text-center border border-gray-300">
                  <div className="flex items-center justify-center gap-2">
                    <button
                      onClick={() => handleEditUser(user)}
                      className="text-white bg-blue-700 hover:bg-blue-800 rounded-lg text-sm px-4 py-2"
                    >
                      S·ª≠a
                    </button>
                    <button
                      onClick={() => handleDeleteUser(user.taiKhoan)}
                      className="text-white bg-red-700 hover:bg-red-800 rounded-lg text-sm px-4 py-2"
                    >
                      X√≥a
                    </button>
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={6} className="text-center p-4">Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng</td>
            </tr>
          )}
        </tbody>
      </table>

      <EditUserModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        user={selectedUser}
        onUpdateSuccess={handleUpdateSuccess}
      />
    </div>
  );
}
